//@version=5
strategy("McGinley Dynamic Crossover Strategy", shorttitle="MD Cross", overlay=true, 
         default_qty_type=strategy.percent_of_equity, default_qty_value=100, 
         initial_capital=10000, commission_type=strategy.commission.percent, commission_value=0.1)

// ============================================================================
// STRATEGY INPUTS
// ============================================================================

// McGinley Dynamic Parameters
fast_period = input.int(11, title="Fast McGinley Period", minval=1, maxval=50, group="McGinley Dynamic Settings")
slow_period = input.int(14, title="Slow McGinley Period", minval=1, maxval=50, group="McGinley Dynamic Settings")
md_smoothing = input.float(0.6, title="McGinley Smoothing Factor", minval=0.1, maxval=2.0, step=0.1, group="McGinley Dynamic Settings")

// Risk Management
use_stop_loss = input.bool(true, title="Enable Stop Loss", group="Risk Management")
stop_loss_pct = input.float(2.0, title="Stop Loss %", minval=0.1, maxval=10.0, step=0.1, group="Risk Management")
use_take_profit = input.bool(true, title="Enable Take Profit", group="Risk Management")
take_profit_pct = input.float(4.0, title="Take Profit %", minval=0.1, maxval=20.0, step=0.1, group="Risk Management")
risk_reward_ratio = input.float(2.0, title="Risk/Reward Ratio", minval=0.5, maxval=10.0, step=0.1, group="Risk Management")

// Time Filters
use_time_filter = input.bool(true, title="Enable Time Filter", group="Time Filters")
start_hour = input.int(9, title="Trading Start Hour", minval=0, maxval=23, group="Time Filters")
end_hour = input.int(16, title="Trading End Hour", minval=0, maxval=23, group="Time Filters")

// Strategy Options
allow_long = input.bool(true, title="Allow Long Trades", group="Strategy Options")
allow_short = input.bool(true, title="Allow Short Trades", group="Strategy Options")
min_bars_between_trades = input.int(5, title="Min Bars Between Trades", minval=1, maxval=100, group="Strategy Options")

// ============================================================================
// McGINLEY DYNAMIC CALCULATION
// ============================================================================

// McGinley Dynamic function
mcginley_dynamic(src, length, smoothing_factor) =>
    var float md = na
    if bar_index == 0
        md := src
    else
        // McGinley Dynamic formula: MD = MD[1] + ((Price - MD[1]) / (Length * (Price/MD[1])^4))
        // With smoothing factor modification
        factor = length * math.pow(src / md[1], 4) * smoothing_factor
        md := md[1] + (src - md[1]) / factor
    md

// Calculate McGinley Dynamic indicators
md_fast = mcginley_dynamic(close, fast_period, md_smoothing)
md_slow = mcginley_dynamic(close, slow_period, md_smoothing)

// ============================================================================
// SIGNAL GENERATION
// ============================================================================

// Crossover signals
bullish_cross = ta.crossover(md_fast, md_slow)
bearish_cross = ta.crossunder(md_fast, md_slow)

// Time filter
in_time_window = use_time_filter ? (hour >= start_hour and hour <= end_hour) : true

// Additional filters for signal quality
price_above_slow_md = close > md_slow
price_below_slow_md = close < md_slow

// Volume filter (optional enhancement)
avg_volume = ta.sma(volume, 20)
high_volume = volume > avg_volume * 1.2

// Signal conditions
long_condition = bullish_cross and in_time_window and allow_long
short_condition = bearish_cross and in_time_window and allow_short

// Enhanced signal conditions (with additional filters)
enhanced_long = long_condition and price_above_slow_md
enhanced_short = short_condition and price_below_slow_md

// Prevent too frequent trades
bars_since_last_trade = ta.barssince(strategy.position_size != strategy.position_size[1])
can_trade = na(bars_since_last_trade) or bars_since_last_trade >= min_bars_between_trades

// Final trade conditions
enter_long = enhanced_long and can_trade and strategy.position_size == 0
enter_short = enhanced_short and can_trade and strategy.position_size == 0

// ============================================================================
// POSITION MANAGEMENT
// ============================================================================

// Calculate stop loss and take profit levels
long_stop_loss = use_stop_loss ? close * (1 - stop_loss_pct / 100) : na
long_take_profit = use_take_profit ? close * (1 + take_profit_pct / 100) : na

short_stop_loss = use_stop_loss ? close * (1 + stop_loss_pct / 100) : na
short_take_profit = use_take_profit ? close * (1 - take_profit_pct / 100) : na

// Alternative: Risk/Reward based levels
long_rr_stop = use_stop_loss ? close * (1 - stop_loss_pct / 100) : na
long_rr_target = use_take_profit ? close + (close - long_rr_stop) * risk_reward_ratio : na

short_rr_stop = use_stop_loss ? close * (1 + stop_loss_pct / 100) : na
short_rr_target = use_take_profit ? close - (short_rr_stop - close) * risk_reward_ratio : na

// ============================================================================
// STRATEGY EXECUTION
// ============================================================================

// Entry orders
if enter_long
    strategy.entry("Long", strategy.long, comment="MD Long")
    if use_stop_loss
        strategy.exit("Long Exit", "Long", stop=long_stop_loss, limit=long_take_profit, comment="SL/TP")

if enter_short
    strategy.entry("Short", strategy.short, comment="MD Short")
    if use_stop_loss
        strategy.exit("Short Exit", "Short", stop=short_stop_loss, limit=short_take_profit, comment="SL/TP")

// Exit conditions based on opposite crossover
if bearish_cross and strategy.position_size > 0
    strategy.close("Long", comment="MD Exit Long")

if bullish_cross and strategy.position_size < 0
    strategy.close("Short", comment="MD Exit Short")

// ============================================================================
// VISUALIZATION
// ============================================================================

// Plot McGinley Dynamic lines
plot(md_fast, title="Fast McGinley Dynamic", color=color.new(color.blue, 0), linewidth=2)
plot(md_slow, title="Slow McGinley Dynamic", color=color.new(color.red, 0), linewidth=2)

// Fill area between McGinley lines
fill_color = md_fast > md_slow ? color.new(color.green, 90) : color.new(color.red, 90)
fill(plot(md_fast), plot(md_slow), color=fill_color, title="McGinley Fill")

// Plot crossover signals
plotshape(bullish_cross, title="Bullish Cross", style=shape.triangleup, 
          location=location.belowbar, color=color.green, size=size.small)
plotshape(bearish_cross, title="Bearish Cross", style=shape.triangledown, 
          location=location.abovebar, color=color.red, size=size.small)

// Plot enhanced entry signals
plotshape(enter_long, title="Long Entry", style=shape.labelup, 
          location=location.belowbar, color=color.new(color.green, 0), 
          text="LONG", textcolor=color.white, size=size.normal)
plotshape(enter_short, title="Short Entry", style=shape.labeldown, 
          location=location.abovebar, color=color.new(color.red, 0), 
          text="SHORT", textcolor=color.white, size=size.normal)

// Plot stop loss and take profit levels
plot(strategy.position_size > 0 ? long_stop_loss : na, title="Long Stop Loss", 
     color=color.new(color.red, 50), style=plot.style_linebr, linewidth=1)
plot(strategy.position_size > 0 ? long_take_profit : na, title="Long Take Profit", 
     color=color.new(color.green, 50), style=plot.style_linebr, linewidth=1)
plot(strategy.position_size < 0 ? short_stop_loss : na, title="Short Stop Loss", 
     color=color.new(color.red, 50), style=plot.style_linebr, linewidth=1)
plot(strategy.position_size < 0 ? short_take_profit : na, title="Short Take Profit", 
     color=color.new(color.green, 50), style=plot.style_linebr, linewidth=1)

// ============================================================================
// ALERTS
// ============================================================================

// Create alerts for automated trading
if enter_long
    alert("McGinley Dynamic LONG signal at " + str.tostring(close) + " on " + str.tostring(time), alert.freq_once_per_bar)

if enter_short
    alert("McGinley Dynamic SHORT signal at " + str.tostring(close) + " on " + str.tostring(time), alert.freq_once_per_bar)

if bearish_cross and strategy.position_size > 0
    alert("McGinley Dynamic EXIT LONG at " + str.tostring(close), alert.freq_once_per_bar)

if bullish_cross and strategy.position_size < 0
    alert("McGinley Dynamic EXIT SHORT at " + str.tostring(close), alert.freq_once_per_bar)

// ============================================================================
// PERFORMANCE METRICS (Table Display)
// ============================================================================

// Calculate custom metrics
var int total_trades = 0
var int winning_trades = 0
var float total_pnl = 0.0
var float max_dd = 0.0

// Update metrics on trade close
if strategy.closedtrades > total_trades
    total_trades := strategy.closedtrades
    if strategy.closedtrades.profit(strategy.closedtrades - 1) > 0
        winning_trades += 1
    total_pnl := strategy.netprofit
    max_dd := strategy.max_drawdown

// Win rate calculation
win_rate = total_trades > 0 ? (winning_trades / total_trades) * 100 : 0

// Create performance table
if barstate.islast and strategy.closedtrades > 0
    var table perf_table = table.new(position.top_right, 2, 8, bgcolor=color.white, border_width=1)
    
    table.cell(perf_table, 0, 0, "Metric", text_color=color.black, bgcolor=color.gray)
    table.cell(perf_table, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    
    table.cell(perf_table, 0, 1, "Total Trades", text_color=color.black)
    table.cell(perf_table, 1, 1, str.tostring(total_trades), text_color=color.black)
    
    table.cell(perf_table, 0, 2, "Win Rate %", text_color=color.black)
    table.cell(perf_table, 1, 2, str.tostring(win_rate) + "%", text_color=color.black)
    
    table.cell(perf_table, 0, 3, "Net Profit", text_color=color.black)
    table.cell(perf_table, 1, 3, str.tostring(strategy.netprofit), text_color=color.black)
    
    table.cell(perf_table, 0, 4, "Max Drawdown", text_color=color.black)
    table.cell(perf_table, 1, 4, str.tostring(strategy.max_drawdown), text_color=color.black)
    
    table.cell(perf_table, 0, 5, "Profit Factor", text_color=color.black)
    table.cell(perf_table, 1, 5, str.tostring(strategy.grossprofit / math.abs(strategy.grossloss)), text_color=color.black)
    
    table.cell(perf_table, 0, 6, "Avg Trade", text_color=color.black)
    avg_trade = total_trades > 0 ? strategy.netprofit / total_trades : 0
    table.cell(perf_table, 1, 6, str.tostring(avg_trade), text_color=color.black)
    
    table.cell(perf_table, 0, 7, "Sharpe Ratio", text_color=color.black)
    // Simplified Sharpe ratio approximation
    returns_std = ta.stdev(strategy.equity - strategy.equity[1], 252)
    sharpe_approx = returns_std > 0 ? (strategy.netprofit / strategy.initial_capital) / returns_std : 0
    table.cell(perf_table, 1, 7, str.tostring(sharpe_approx), text_color=color.black)

// ============================================================================
// DEBUGGING INFO
// ============================================================================

// Plot debugging information (can be toggled off)
show_debug = input.bool(false, title="Show Debug Info", group="Debug")

// Plot current conditions (bgcolor must be at script level)
bgcolor(show_debug and in_time_window ? color.new(color.green, 95) : show_debug and not in_time_window ? color.new(color.red, 95) : na, title="Time Window")

if show_debug
    
    // Show values in a label on last bar
    if barstate.islast
        var label debug_label = na
        label.delete(debug_label)
        debug_text = "Fast MD: " + str.tostring(md_fast) + "\nSlow MD: " + str.tostring(md_slow) + "\nSpread: " + str.tostring(md_fast - md_slow) + "\nVolume: " + str.tostring(volume) + "\nHour: " + str.tostring(hour)
        debug_label := label.new(bar_index, high, debug_text, style=label.style_label_down, color=color.new(color.blue, 80), textcolor=color.white, size=size.small)

// ============================================================================
// STRATEGY NOTES
// ============================================================================

// Strategy Description:
// This McGinley Dynamic Crossover Strategy uses two McGinley Dynamic indicators
// with different periods (11 and 14) to generate trend-following signals.
//
// Key Features:
// 1. McGinley Dynamic smoothing reduces whipsaws compared to traditional MA crossovers
// 2. Time-based filtering to trade only during specific hours
// 3. Volume confirmation for signal quality
// 4. Risk management with stop loss and take profit levels
// 5. Position sizing and trade frequency controls
// 6. Comprehensive performance metrics display
//
// Recommended Settings for 45-minute timeframe:
// - Fast McGinley: 11 periods
// - Slow McGinley: 14 periods  
// - Smoothing Factor: 0.6
// - Stop Loss: 2%
// - Take Profit: 4% (2:1 risk/reward)
// - Trading Hours: 9 AM to 4 PM (adjust for your timezone)
//
// The strategy works best in trending markets and may produce whipsaws
// during sideways market conditions. Consider adding additional filters
// like trend confirmation from higher timeframes for better performance.